{
  "address": "0xf5F507D2a48B62082e3440B185f9e10a47156554",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "code",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "ReferralCodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "WithdrawalDispersed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numReferrals",
          "type": "uint256"
        }
      ],
      "name": "_rewardPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "createSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "expirydates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCodes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnapshotEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUntracked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nativeEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referralCodes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "referredBy",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "referrees",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "code",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setReferree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "referree",
          "type": "string"
        }
      ],
      "name": "settlement",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "referree",
          "type": "string"
        }
      ],
      "name": "settlementCard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "referree",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "settlementRegister",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "referree",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "settlementRegisterWithCard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "referree",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "settlementRegisterWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "referree",
          "type": "string"
        }
      ],
      "name": "settlementWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "snapshotNativeEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "snapshotTokenEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snapshotUntrackedEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "totalNativeEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "totalReferrals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "totalTokenEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trackedNativeEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trackedTokenEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "untrackedEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "code",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "newExpiry",
          "type": "uint256"
        }
      ],
      "name": "updateReferralCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batch",
          "type": "uint256"
        }
      ],
      "name": "withdrawAllNativeEarnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "batch",
          "type": "uint256"
        }
      ],
      "name": "withdrawAllTokenEarnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaedebbee30dff347f1ed5c78c19d2113d0f71466a1a8f034d1d98c62e7f77f40",
  "receipt": {
    "to": null,
    "from": "0x2A0D7311fA7e9aC2890CFd8219b2dEf0c206E79B",
    "contractAddress": "0xf5F507D2a48B62082e3440B185f9e10a47156554",
    "transactionIndex": 2,
    "gasUsed": "2309821",
    "logsBloom": "0x
    "blockHash": "0x2709188e560ea463e8241afa048df5dabf9d29ec5b6a46d6048c0c0fc6c11c1b",
    "transactionHash": "0xaedebbee30dff347f1ed5c78c19d2113d0f71466a1a8f034d1d98c62e7f77f40",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 57535065,
        "transactionHash": "0xaedebbee30dff347f1ed5c78c19d2113d0f71466a1a8f034d1d98c62e7f77f40",
        "address": "0xf5F507D2a48B62082e3440B185f9e10a47156554",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002a0d7311fa7e9ac2890cfd8219b2def0c206e79b"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x2709188e560ea463e8241afa048df5dabf9d29ec5b6a46d6048c0c0fc6c11c1b"
      }
    ],
    "blockNumber": 57535065,
    "cumulativeGasUsed": "3113165",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c7e40ea5f033df78220ad43e326ccd0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferralCodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WithdrawalDispersed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numReferrals\",\"type\":\"uint256\"}],\"name\":\"_rewardPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"createSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"expirydates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUntracked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nativeEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralCodes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"referredBy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"referrees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setReferree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referree\",\"type\":\"string\"}],\"name\":\"settlement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referree\",\"type\":\"string\"}],\"name\":\"settlementCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referree\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"settlementRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referree\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"settlementRegisterWithCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referree\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"settlementRegisterWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referree\",\"type\":\"string\"}],\"name\":\"settlementWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"snapshotNativeEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"snapshotTokenEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotUntrackedEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"totalNativeEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"totalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"totalTokenEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trackedNativeEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trackedTokenEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"untrackedEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newExpiry\",\"type\":\"uint256\"}],\"name\":\"updateReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"}],\"name\":\"withdrawAllNativeEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"}],\"name\":\"withdrawAllTokenEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setReferree(bytes32,address,uint256)\":{\"notice\":\"Only your controller or admin should be able to call this!\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/ReferralController.sol\":\"ReferralController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ethregistrar/IETHRegistrarController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\ninterface IETHRegistrarController {\\n\\n    struct TokenParams{\\n        string token;\\n        address tokenAddress;\\n    }\\n    struct RegisterParams {\\n        string name;\\n        address owner;\\n        uint256 duration;\\n        bytes32 secret;\\n        address resolver;\\n        bytes[] data;\\n        bool reverseRecord;\\n        uint16 ownerControlledFuses;\\n    }\\n    function rentPrice(\\n        string memory,\\n        uint256,\\n        bool\\n    ) external view returns (IPriceOracle.Price memory);\\n\\n    function rentPriceToken(\\n        string memory name,\\n        uint256 duration,\\n        string memory token,\\n        bool lifetime\\n    ) external view returns (IPriceOracle.Price memory price);\\n\\n    function available(string memory) external returns (bool);\\n\\n    function makeCommitment(\\n        string memory,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16,\\n        bool\\n    ) external pure returns (bytes32);\\n\\n    function commit(bytes32) external;\\n\\n    function register(\\n        string memory,\\n        address,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes[] calldata,\\n        bool,\\n        uint16,\\n        bool,\\n        string memory\\n    ) external payable;\\n\\n    function registerWithToken(\\n        RegisterParams memory registerParams,\\n        TokenParams memory tokenParams,\\n        bool lifetime,\\n        string memory referree\\n    ) external;\\n\\n    function renew(string calldata, uint256, bool) external payable;\\n\\n    function renewTokens(\\n        string calldata name,\\n        uint256 duration,\\n        string memory token,\\n        address tokenAddress,\\n        bool lifetime\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5b063364fa339be07758117e6e53fb7991653c99bfdab24ba200ec805b655190\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration,\\n        bool lifetime\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0xc1f749d6238b0e77cc804153b2ce8fc2e082d28129e734839ccc2b2be7ee9d2b\",\"license\":\"MIT\"},\"contracts/ethregistrar/ReferralController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\nimport {IPriceOracle} from \\\"./IETHRegistrarController.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nusing SafeERC20 for IERC20;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ReferralController is Ownable {\\n    // Mapping from referral code to referrer address\\n    uint16 private constant TIER1 = 2;\\n    uint16 private constant TIER2 = 15;\\n    uint16 private constant TIER3 = 20;\\n    uint256 private constant PCT1 = 15;\\n    uint256 private constant PCT2 = 20;\\n    uint256 private constant PCT3 = 25;\\n    mapping(address => bool) public controllers;\\n    mapping(bytes32 => uint256) public commitments;\\n    mapping(bytes32 => address) public referrees;\\n    mapping(bytes32 => uint256) public expirydates;\\n    mapping(address => bytes32[]) public referrals;\\n    mapping(bytes32 => string) public referredBy;\\n    mapping(address => uint256) public nativeEarnings;\\n    mapping(address => mapping(address => uint256)) public tokenEarnings;\\n\\n    bytes32[] public referralCodes;\\n    uint256 public untrackedEarnings;\\n    uint256 public snapshotUntrackedEarnings;\\n    mapping(address => uint256) public snapshotNativeEarnings;\\n    mapping(address => mapping(address => uint256))\\n        public snapshotTokenEarnings;\\n    uint256 public trackedNativeEarnings;\\n    mapping(address => uint256) public trackedTokenEarnings;\\n\\n    event ReferralCodeAdded(string indexed code, address indexed referrer);\\n    event WithdrawalDispersed(address indexed);\\n    modifier onlyControllerOrOwner() {\\n        require(\\n            controllers[msg.sender] || msg.sender == owner(),\\n            \\\"Not a controller or owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        require(controller != address(0), \\\"Invalid controller address\\\");\\n        controllers[controller] = true;\\n    }\\n\\n    function settlementRegister(\\n        string memory referree,\\n        string memory name,\\n        address owner,\\n        uint256 amount,\\n        address receiver\\n    ) external payable onlyControllerOrOwner {\\n        // If the referree is already registered, we can use it\\n\\n        require(\\n            receiver != address(0) && receiver != owner,\\n            \\\"Invalid receiver address\\\"\\n        );\\n        if (expirydates[keccak256(bytes(referree))] > block.timestamp) {\\n            bool contains;\\n            for (uint256 i = 0; i < referrals[receiver].length; i++) {\\n                if (referrals[receiver][i] == keccak256(bytes(name))) {\\n                    contains = true;\\n                    break;\\n                }\\n            }\\n            if (contains == false) {\\n                referrals[receiver].push(keccak256(bytes(name)));\\n                referredBy[keccak256(bytes(name))] = referree;\\n                _applyNativeReward(receiver, amount, false);\\n            } else {\\n                _applyNativeReward(receiver, amount, false);\\n            }\\n        } else {\\n            payable(Ownable.owner()).transfer(amount);\\n        }\\n    }\\n\\n    function settlementRegisterWithCard(\\n        string memory referree,\\n        string memory name,\\n        address owner,\\n        uint256 amount,\\n        address receiver\\n    ) external onlyControllerOrOwner {\\n        // If the referree is already registered, we can use it\\n        require(\\n            receiver != address(0) && receiver != owner,\\n            \\\"Invalid receiver address\\\"\\n        );\\n        if (expirydates[keccak256(bytes(referree))] > block.timestamp) {\\n            bool contains;\\n            for (uint256 i = 0; i < referrals[receiver].length; i++) {\\n                if (referrals[receiver][i] == keccak256(bytes(name))) {\\n                    contains = true;\\n                }\\n            }\\n            if (contains == false) {\\n                referrals[receiver].push(keccak256(bytes(name)));\\n                referredBy[keccak256(bytes(name))] = referree;\\n                _applyNativeReward(receiver, amount, true);\\n            } else {\\n                _applyNativeReward(receiver, amount, true);\\n            }\\n        }\\n    }\\n\\n    /// @notice Only your controller or admin should be able to call this!\\n    function setReferree(\\n        bytes32 code,\\n        address who,\\n        uint256 duration\\n    ) external onlyControllerOrOwner {\\n        require(code != bytes32(0), \\\"Invalid referral code\\\");\\n        require(who != address(0), \\\"Invalid referree address\\\");\\n        require(\\n            referrees[code] == address(0),\\n            \\\"Referral code already registered\\\"\\n        );\\n        address prevReferree = referrees[code];\\n        if (prevReferree != address(0)) {\\n            referrals[prevReferree] = new bytes32[](0);\\n        }\\n        referrees[code] = who;\\n        referralCodes.push(code);\\n        expirydates[code] = duration;\\n    }\\n\\n    function settlementCard(\\n        uint256 amount,\\n        address receiver,\\n        string memory referree\\n    ) external onlyControllerOrOwner {\\n        // If the referree is already registered, we can use it\\n        if (expirydates[keccak256(bytes(referree))] > block.timestamp) {\\n            require(receiver != address(0), \\\"Invalid receiver address\\\");\\n            _applyNativeReward(receiver, amount, true);\\n        }\\n    }\\n\\n    function settlement(\\n        uint256 amount,\\n        address receiver,\\n        string memory referree\\n    ) external payable onlyControllerOrOwner {\\n        // If the referree is already registered, we can use it\\n        if (expirydates[keccak256(bytes(referree))] > block.timestamp) {\\n            require(receiver != address(0), \\\"Invalid receiver address\\\");\\n            _applyNativeReward(receiver, amount, false);\\n        } else {\\n            payable(Ownable.owner()).transfer(amount);\\n        }\\n    }\\n\\n    function settlementWithToken(\\n        uint256 amount,\\n        address receiver,\\n        address tokenAddress,\\n        string memory referree\\n    ) external onlyControllerOrOwner {\\n        // If the referree is already registered, we can use it\\n        if (expirydates[keccak256(bytes(referree))] > block.timestamp) {\\n            require(receiver != address(0), \\\"Invalid receiver address\\\");\\n            _applyTokenReward(receiver, tokenAddress, amount);\\n        } else {\\n            IERC20(tokenAddress).safeTransfer(Ownable.owner(), amount);\\n        }\\n    }\\n\\n    function settlementRegisterWithToken(\\n        string memory referree,\\n        string memory name,\\n        address owner,\\n        uint256 amount,\\n        address tokenAddress\\n    ) external onlyControllerOrOwner {\\n        // If the referree is already registered, we can use it\\n        // Implement token settlement logic here if needed\\n        if (expirydates[keccak256(bytes(referree))] > block.timestamp) {\\n            address receiver = referrees[keccak256(bytes(referree))];\\n            if (receiver != address(0) && receiver != owner) {\\n                bool contains;\\n                for (uint256 i = 0; i < referrals[receiver].length; i++) {\\n                    if (referrals[receiver][i] == keccak256(bytes(name))) {\\n                        contains = true;\\n                    }\\n                }\\n                if (contains == false) {\\n                    referrals[receiver].push(keccak256(bytes(name)));\\n                    referredBy[keccak256(bytes(name))] = referree;\\n                    _applyTokenReward(receiver, tokenAddress, amount);\\n                } else {\\n                    _applyTokenReward(receiver, tokenAddress, amount);\\n                }\\n            }\\n        } else {\\n            // If the referree is not registered, we can transfer the amount to the owner\\n            IERC20(tokenAddress).safeTransfer(Ownable.owner(), amount);\\n        }\\n    }\\n\\n    function withdrawAllNativeEarnings(uint256 batch) external onlyOwner {\\n        for (uint256 i = 0; i < batch; ) {\\n            bytes32 code = referralCodes[batch];\\n            if (block.timestamp < expirydates[code]) {\\n                address referrer = referrees[code];\\n                uint256 earnings = nativeEarnings[referrer];\\n                if (earnings > 0) {\\n                    (bool ok, ) = payable(referrer).call{value: earnings}(\\\"\\\");\\n                    require(ok, \\\"Payment failed\\\");\\n                    nativeEarnings[referrer] = 0;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // Transfer any remaining balance to the owner\\n        uint256 remainingBalance = address(this).balance;\\n        if (remainingBalance > 0) {\\n            payable(owner()).transfer(remainingBalance);\\n        }\\n        // Emit an event for the withdrawal\\n        emit WithdrawalDispersed(msg.sender);\\n    }\\n\\n    function withdrawAllTokenEarnings(\\n        address[] memory tokenAddresses,\\n        uint256 batch\\n    ) external onlyOwner {\\n        uint256 tokenLength = tokenAddresses.length;\\n        for (uint256 j = 0; j < tokenLength; ) {\\n            address tokenAddress = tokenAddresses[j];\\n            for (uint256 i = 0; i < batch; ) {\\n                bytes32 code = referralCodes[i];\\n                if (block.timestamp < expirydates[code]) {\\n                    address referrer = referrees[code];\\n                    uint256 earnings = tokenEarnings[referrer][tokenAddress];\\n                    require(earnings > 0, \\\"No earnings to withdraw\\\");\\n                    if (earnings > 0) {\\n                        // Assuming the token follows ERC20 standard\\n                        IERC20(tokenAddress).safeTransfer(referrer, earnings);\\n                        tokenEarnings[referrer][tokenAddress] = 0;\\n                    }\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            unchecked {\\n                ++j;\\n            }\\n        }\\n    }\\n\\n    function totalReferrals(address referrer) external view returns (uint256) {\\n        return referrals[referrer].length;\\n    }\\n\\n    function totalNativeEarnings(\\n        address referrer\\n    ) external view returns (uint256) {\\n        return nativeEarnings[referrer];\\n    }\\n\\n    function totalTokenEarnings(\\n        address referrer,\\n        address tokenAddress\\n    ) external view returns (uint256) {\\n        return tokenEarnings[referrer][tokenAddress];\\n    }\\n\\n    function getCodes() external view returns (uint256) {\\n        return referralCodes.length;\\n    }\\n    function updateReferralCode(\\n        bytes32 code,\\n        uint256 newExpiry\\n    ) external onlyControllerOrOwner {\\n        require(expirydates[code] > 0, \\\"Referral code does not exist\\\");\\n        expirydates[code] = newExpiry;\\n    }\\n\\n    function _rewardPct(uint256 numReferrals) public pure returns (uint256) {\\n        if (numReferrals >= TIER3) return PCT3;\\n        if (numReferrals >= TIER2) return PCT2;\\n        if (numReferrals >= TIER1) return PCT1;\\n        return 0; // No reward for less than TIER1 referrals\\n    }\\n\\n    function _applyNativeReward(\\n        address receiver,\\n        uint256 amount,\\n        bool isFiat\\n    ) private {\\n        nativeEarnings[receiver] +=\\n            (amount * _rewardPct(referrals[receiver].length)) /\\n            100;\\n        if (isFiat) {\\n            untrackedEarnings +=\\n                (amount * _rewardPct(referrals[receiver].length)) /\\n                100;\\n        }\\n    }\\n\\n    function _applyTokenReward(\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        tokenEarnings[receiver][token] +=\\n            (amount * _rewardPct(referrals[receiver].length)) /\\n            100;\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function tokenBalance(\\n        address tokenAddress\\n    ) public view returns (uint256) {\\n        return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    function getUntracked() public view returns (uint256) {\\n        return untrackedEarnings;\\n    }\\n\\n    function createSnapshot(\\n        address[] memory tokenAddresses\\n    ) external onlyOwner {\\n        snapshotUntrackedEarnings = untrackedEarnings;\\n        for (uint256 i = 0; i < referralCodes.length; i++) {\\n            bytes32 code = referralCodes[i];\\n            address referrer = referrees[code];\\n            snapshotNativeEarnings[referrer] = nativeEarnings[referrer];\\n        }\\n        for (uint256 j = 0; j < tokenAddresses.length; j++) {\\n            address tokenAddress = tokenAddresses[j];\\n            for (uint256 i = 0; i < referralCodes.length; i++) {\\n                bytes32 code = referralCodes[i];\\n                address referrer = referrees[code];\\n                snapshotTokenEarnings[referrer][tokenAddress] = tokenEarnings[\\n                    referrer\\n                ][tokenAddress];\\n            }\\n        }\\n    }\\n\\n    function getSnapshotEarnings() public view returns (uint256) {\\n        return snapshotUntrackedEarnings;\\n    }\\n}\\n\",\"keccak256\":\"0xd84283d895a37b233ac7cdda54599c813d163463e99af5dadd708be214a5c8d2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61286c8061007e6000396000f3fe6080604052600436106102a05760003560e01c8063afbcb2691161016e578063d7397f22116100cb578063ec0a920f1161007f578063eedc966a11610064578063eedc966a146107bb578063f2fde38b146107db578063ff8f3947146107fb57600080fd5b8063ec0a920f14610765578063edaf9f6e1461078557600080fd5b8063dbbb1968116100b0578063dbbb1968146106fa578063e697b5d814610732578063e858db081461075257600080fd5b8063d7397f22146106a4578063da8c229e146106ba57600080fd5b8063c62c7b7711610122578063d0da614411610107578063d0da614414610637578063d184befa14610657578063d488ac121461067757600080fd5b8063c62c7b77146105f5578063c70ad00c1461060a57600080fd5b8063c08d52af11610153578063c08d52af14610594578063c210401b146105ca578063c29fb0f1146105e057600080fd5b8063afbcb26914610561578063b69ef8a81461058157600080fd5b8063715018a61161021c5780638b07795b116101d057806395a885c2116101b557806395a885c2146105165780639c31e6ea1461052b578063a7fc7a071461054157600080fd5b80638b07795b146104c45780638da5cb5b146104e457600080fd5b8063830ecef811610201578063830ecef81461044a578063839df94514610477578063898c6495146104a457600080fd5b8063715018a6146104225780637d31266a1461043757600080fd5b80633ba96fdf1161027357806344430b691161025857806344430b69146103ac5780635d5d2dec146103cc578063668c91c81461040257600080fd5b80633ba96fdf1461035f5780633eae35451461038c57600080fd5b80630814cdc1146102a55780631f8e2271146102f057806320447f0b14610312578063338bc97014610332575b600080fd5b3480156102b157600080fd5b506102dd6102c03660046121cd565b600d60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156102fc57600080fd5b5061031061030b366004612200565b61081b565b005b34801561031e57600080fd5b5061031061032d3660046122f8565b610a66565b34801561033e57600080fd5b5061035261034d36600461232d565b610ba7565b6040516102e7919061236a565b34801561036b57600080fd5b506102dd61037a36600461239d565b600c6020526000908152604090205481565b34801561039857600080fd5b506103106103a73660046123bf565b610c41565b3480156103b857600080fd5b506102dd6103c736600461232d565b610d9a565b3480156103d857600080fd5b506102dd6103e736600461239d565b6001600160a01b031660009081526007602052604090205490565b34801561040e57600080fd5b5061031061041d366004612474565b610dd4565b34801561042e57600080fd5b50610310610ed1565b6103106104453660046124cb565b610ee5565b34801561045657600080fd5b506102dd61046536600461239d565b600f6020526000908152604090205481565b34801561048357600080fd5b506102dd61049236600461232d565b60026020526000908152604090205481565b3480156104b057600080fd5b506103106104bf3660046124cb565b61113e565b3480156104d057600080fd5b506103106104df36600461255a565b61134b565b3480156104f057600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102e7565b34801561052257600080fd5b50600b546102dd565b34801561053757600080fd5b506102dd600a5481565b34801561054d57600080fd5b5061031061055c36600461239d565b61142c565b34801561056d57600080fd5b506102dd61057c36600461232d565b6114b1565b34801561058d57600080fd5b50476102dd565b3480156105a057600080fd5b506102dd6105af36600461239d565b6001600160a01b031660009081526005602052604090205490565b3480156105d657600080fd5b506102dd600b5481565b3480156105ec57600080fd5b506009546102dd565b34801561060157600080fd5b50600a546102dd565b34801561061657600080fd5b506102dd61062536600461239d565b60076020526000908152604090205481565b34801561064357600080fd5b506102dd6106523660046121cd565b6114d2565b34801561066357600080fd5b5061031061067236600461257c565b6114ff565b34801561068357600080fd5b506102dd61069236600461232d565b60046020526000908152604090205481565b3480156106b057600080fd5b506102dd600e5481565b3480156106c657600080fd5b506106ea6106d536600461239d565b60016020526000908152604090205460ff1681565b60405190151581526020016102e7565b34801561070657600080fd5b506102dd6107153660046121cd565b600860209081526000928352604080842090915290825290205481565b34801561073e57600080fd5b506102dd61074d3660046125e4565b611621565b610310610760366004612474565b611652565b34801561077157600080fd5b5061031061078036600461232d565b611783565b34801561079157600080fd5b506104fe6107a036600461232d565b6003602052600090815260409020546001600160a01b031681565b3480156107c757600080fd5b506102dd6107d636600461239d565b61193c565b3480156107e757600080fd5b506103106107f636600461239d565b6119c0565b34801561080757600080fd5b506103106108163660046124cb565b611a50565b3360009081526001602052604090205460ff168061084357506000546001600160a01b031633145b6108945760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e65720000000000000060448201526064015b60405180910390fd5b826108e15760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420726566657272616c20636f64650000000000000000000000604482015260640161088b565b6001600160a01b0382166109375760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726566657272656520616464726573730000000000000000604482015260640161088b565b6000838152600360205260409020546001600160a01b03161561099c5760405162461bcd60e51b815260206004820181905260248201527f526566657272616c20636f646520616c72656164792072656769737465726564604482015260640161088b565b6000838152600360205260409020546001600160a01b031680156109ed5760408051600080825260208083018085526001600160a01b0386168352600590915292902090516109eb9290612151565b505b506000838152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03969096169590951790945560098054600181019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01949094556004909352912055565b610a6e611c5b565b600a54600b5560005b600954811015610adf57600060098281548110610a9657610a9661260e565b60009182526020808320909101548252600381526040808320546001600160a01b031683526007825280832054600c909252909120555080610ad78161263a565b915050610a77565b5060005b8151811015610ba3576000828281518110610b0057610b0061260e565b6020026020010151905060005b600954811015610b8e57600060098281548110610b2c57610b2c61260e565b60009182526020808320909101548252600381526040808320546001600160a01b039081168085526008845282852091881680865291845282852054908552600d84528285209185529252909120555080610b868161263a565b915050610b0d565b50508080610b9b9061263a565b915050610ae3565b5050565b60066020526000908152604090208054610bc090612653565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec90612653565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b505050505081565b610c49611c5b565b815160005b81811015610d94576000848281518110610c6a57610c6a61260e565b6020026020010151905060005b84811015610d8a57600060098281548110610c9457610c9461260e565b906000526020600020015490506004600082815260200190815260200160002054421015610d81576000818152600360209081526040808320546001600160a01b0390811680855260088452828520918816855292529091205480610d3b5760405162461bcd60e51b815260206004820152601760248201527f4e6f206561726e696e677320746f207769746864726177000000000000000000604482015260640161088b565b8015610d7e57610d556001600160a01b0386168383611cb5565b6001600160a01b0380831660009081526008602090815260408083209389168352929052908120555b50505b50600101610c77565b5050600101610c4e565b50505050565b600060148210610dac57506019919050565b600f8210610dbc57506014919050565b60028210610dcc5750600f919050565b506000919050565b3360009081526001602052604090205460ff1680610dfc57506000546001600160a01b031633145b610e485760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b426004600083805190602001208152602001908152602001600020541115610ecc576001600160a01b038216610ec05760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b610ecc82846001611d35565b505050565b610ed9611c5b565b610ee36000611df5565b565b3360009081526001602052604090205460ff1680610f0d57506000546001600160a01b031633145b610f595760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b6001600160a01b03811615801590610f835750826001600160a01b0316816001600160a01b031614155b610fcf5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b4260046000878051906020012081526020019081526020016000205411156110fc576000805b6001600160a01b03831660009081526005602052604090205481101561107e57858051906020012060056000856001600160a01b03166001600160a01b0316815260200190815260200160002082815481106110535761105361260e565b90600052602060002001540361106c576001915061107e565b806110768161263a565b915050610ff5565b508015156000036110ea576001600160a01b03821660009081526005602090815260408083208851898401908120825460018101845592865284862090920191909155885190208352600690915290206110d887826126d3565b506110e582846000611d35565b6110f6565b6110f682846000611d35565b50611137565b600080546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015611135573d6000803e3d6000fd5b505b5050505050565b3360009081526001602052604090205460ff168061116657506000546001600160a01b031633145b6111b25760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b6001600160a01b038116158015906111dc5750826001600160a01b0316816001600160a01b031614155b6112285760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b426004600087805190602001208152602001908152602001600020541115611137576000805b6001600160a01b0383166000908152600560205260409020548110156112d357858051906020012060056000856001600160a01b03166001600160a01b0316815260200190815260200160002082815481106112ac576112ac61260e565b9060005260206000200154036112c157600191505b806112cb8161263a565b91505061124e565b5080151560000361133f576001600160a01b038216600090815260056020908152604080832088518984019081208254600181018455928652848620909201919091558851902083526006909152902061132d87826126d3565b5061133a82846001611d35565b611135565b61113582846001611d35565b3360009081526001602052604090205460ff168061137357506000546001600160a01b031633145b6113bf5760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b60008281526004602052604090205461141a5760405162461bcd60e51b815260206004820152601c60248201527f526566657272616c20636f646520646f6573206e6f7420657869737400000000604482015260640161088b565b60009182526004602052604090912055565b611434611c5b565b6001600160a01b03811661148a5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420636f6e74726f6c6c65722061646472657373000000000000604482015260640161088b565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b600981815481106114c157600080fd5b600091825260209091200154905081565b6001600160a01b038083166000908152600860209081526040808320938516835292905220545b92915050565b3360009081526001602052604090205460ff168061152757506000546001600160a01b031633145b6115735760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b4260046000838051906020012081526020019081526020016000205411156115fb576001600160a01b0383166115eb5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b6115f6838386611e52565b610d94565b610d946116106000546001600160a01b031690565b6001600160a01b0384169086611cb5565b6005602052816000526040600020818154811061163d57600080fd5b90600052602060002001600091509150505481565b3360009081526001602052604090205460ff168061167a57506000546001600160a01b031633145b6116c65760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b42600460008380519060200120815260200190815260200160002054111561174a576001600160a01b03821661173e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b610ecc82846000611d35565b600080546040516001600160a01b039091169185156108fc02918691818181858888f19350505050158015610d94573d6000803e3d6000fd5b61178b611c5b565b60005b818110156118ca576000600983815481106117ab576117ab61260e565b9060005260206000200154905060046000828152602001908152602001600020544210156118c1576000818152600360209081526040808320546001600160a01b031680845260079092529091205480156118be576000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461184d576040519150601f19603f3d011682016040523d82523d6000602084013e611852565b606091505b50509050806118a35760405162461bcd60e51b815260206004820152600e60248201527f5061796d656e74206661696c6564000000000000000000000000000000000000604482015260640161088b565b506001600160a01b0382166000908152600760205260408120555b50505b5060010161178e565b5047801561190d57600080546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561190b573d6000803e3d6000fd5b505b60405133907f8139efc425db5c04b6dd4e0df2e2ae5d44350cfb145cfbfc83bf39abbc2591ee90600090a25050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561199c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f99190612793565b6119c8611c5b565b6001600160a01b038116611a445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161088b565b611a4d81611df5565b50565b3360009081526001602052604090205460ff1680611a7857506000546001600160a01b031633145b611ac45760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b426004600087805190602001208152602001908152602001600020541115611c355784516020808701919091206000908152600390915260409020546001600160a01b03168015801590611b2a5750836001600160a01b0316816001600160a01b031614155b156110f6576000805b6001600160a01b038316600090815260056020526040902054811015611bb857868051906020012060056000856001600160a01b03166001600160a01b031681526020019081526020016000208281548110611b9157611b9161260e565b906000526020600020015403611ba657600191505b80611bb08161263a565b915050611b33565b50801515600003611c23576001600160a01b038216600090815260056020908152604080832089518a840190812082546001810184559286528486209092019190915589519020835260069091529020611c1288826126d3565b50611c1e828486611e52565b611c2e565b611c2e828486611e52565b5050611137565b611137611c4a6000546001600160a01b031690565b6001600160a01b0383169084611cb5565b6000546001600160a01b03163314610ee35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ecc908490611ec2565b6001600160a01b038316600090815260056020526040902054606490611d5a90610d9a565b611d6490846127ac565b611d6e91906127c3565b6001600160a01b03841660009081526007602052604081208054909190611d969084906127e5565b90915550508015610ecc576001600160a01b038316600090815260056020526040902054606490611dc690610d9a565b611dd090846127ac565b611dda91906127c3565b600a6000828254611deb91906127e5565b9091555050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038316600090815260056020526040902054606490611e7790610d9a565b611e8190836127ac565b611e8b91906127c3565b6001600160a01b03808516600090815260086020908152604080832093871683529290529081208054909190611deb9084906127e5565b6000611f17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611faa9092919063ffffffff16565b9050805160001480611f38575080806020019051810190611f3891906127f8565b610ecc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161088b565b6060611fb98484600085611fc1565b949350505050565b6060824710156120395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161088b565b600080866001600160a01b03168587604051612055919061281a565b60006040518083038185875af1925050503d8060008114612092576040519150601f19603f3d011682016040523d82523d6000602084013e612097565b606091505b50915091506120a8878383876120b3565b979650505050505050565b6060831561212257825160000361211b576001600160a01b0385163b61211b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161088b565b5081611fb9565b611fb983838151156121375781518083602001fd5b8060405162461bcd60e51b815260040161088b919061236a565b82805482825590600052602060002090810192821561218c579160200282015b8281111561218c578251825591602001919060010190612171565b5061219892915061219c565b5090565b5b80821115612198576000815560010161219d565b80356001600160a01b03811681146121c857600080fd5b919050565b600080604083850312156121e057600080fd5b6121e9836121b1565b91506121f7602084016121b1565b90509250929050565b60008060006060848603121561221557600080fd5b83359250612225602085016121b1565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561227457612274612235565b604052919050565b600082601f83011261228d57600080fd5b8135602067ffffffffffffffff8211156122a9576122a9612235565b8160051b6122b882820161224b565b92835284810182019282810190878511156122d257600080fd5b83870192505b848310156120a8576122e9836121b1565b825291830191908301906122d8565b60006020828403121561230a57600080fd5b813567ffffffffffffffff81111561232157600080fd5b611fb98482850161227c565b60006020828403121561233f57600080fd5b5035919050565b60005b83811015612361578181015183820152602001612349565b50506000910152565b6020815260008251806020840152612389816040850160208701612346565b601f01601f19169190910160400192915050565b6000602082840312156123af57600080fd5b6123b8826121b1565b9392505050565b600080604083850312156123d257600080fd5b823567ffffffffffffffff8111156123e957600080fd5b6123f58582860161227c565b95602094909401359450505050565b600082601f83011261241557600080fd5b813567ffffffffffffffff81111561242f5761242f612235565b612442601f8201601f191660200161224b565b81815284602083860101111561245757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561248957600080fd5b83359250612499602085016121b1565b9150604084013567ffffffffffffffff8111156124b557600080fd5b6124c186828701612404565b9150509250925092565b600080600080600060a086880312156124e357600080fd5b853567ffffffffffffffff808211156124fb57600080fd5b61250789838a01612404565b9650602088013591508082111561251d57600080fd5b5061252a88828901612404565b945050612539604087016121b1565b92506060860135915061254e608087016121b1565b90509295509295909350565b6000806040838503121561256d57600080fd5b50508035926020909101359150565b6000806000806080858703121561259257600080fd5b843593506125a2602086016121b1565b92506125b0604086016121b1565b9150606085013567ffffffffffffffff8111156125cc57600080fd5b6125d887828801612404565b91505092959194509250565b600080604083850312156125f757600080fd5b612600836121b1565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161264c5761264c612624565b5060010190565b600181811c9082168061266757607f821691505b60208210810361268757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ecc57600081815260208120601f850160051c810160208610156126b45750805b601f850160051c820191505b81811015611135578281556001016126c0565b815167ffffffffffffffff8111156126ed576126ed612235565b612701816126fb8454612653565b8461268d565b602080601f831160018114612736576000841561271e5750858301515b600019600386901b1c1916600185901b178555611135565b600085815260208120601f198616915b8281101561276557888601518255948401946001909101908401612746565b50858210156127835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156127a557600080fd5b5051919050565b80820281158282048414176114f9576114f9612624565b6000826127e057634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156114f9576114f9612624565b60006020828403121561280a57600080fd5b815180151581146123b857600080fd5b6000825161282c818460208701612346565b919091019291505056fea2646970667358221220e0260e6672ad54e64c987650e35190fedfa0396dbbe0cfaedca8dfb14abbdd6064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102a05760003560e01c8063afbcb2691161016e578063d7397f22116100cb578063ec0a920f1161007f578063eedc966a11610064578063eedc966a146107bb578063f2fde38b146107db578063ff8f3947146107fb57600080fd5b8063ec0a920f14610765578063edaf9f6e1461078557600080fd5b8063dbbb1968116100b0578063dbbb1968146106fa578063e697b5d814610732578063e858db081461075257600080fd5b8063d7397f22146106a4578063da8c229e146106ba57600080fd5b8063c62c7b7711610122578063d0da614411610107578063d0da614414610637578063d184befa14610657578063d488ac121461067757600080fd5b8063c62c7b77146105f5578063c70ad00c1461060a57600080fd5b8063c08d52af11610153578063c08d52af14610594578063c210401b146105ca578063c29fb0f1146105e057600080fd5b8063afbcb26914610561578063b69ef8a81461058157600080fd5b8063715018a61161021c5780638b07795b116101d057806395a885c2116101b557806395a885c2146105165780639c31e6ea1461052b578063a7fc7a071461054157600080fd5b80638b07795b146104c45780638da5cb5b146104e457600080fd5b8063830ecef811610201578063830ecef81461044a578063839df94514610477578063898c6495146104a457600080fd5b8063715018a6146104225780637d31266a1461043757600080fd5b80633ba96fdf1161027357806344430b691161025857806344430b69146103ac5780635d5d2dec146103cc578063668c91c81461040257600080fd5b80633ba96fdf1461035f5780633eae35451461038c57600080fd5b80630814cdc1146102a55780631f8e2271146102f057806320447f0b14610312578063338bc97014610332575b600080fd5b3480156102b157600080fd5b506102dd6102c03660046121cd565b600d60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156102fc57600080fd5b5061031061030b366004612200565b61081b565b005b34801561031e57600080fd5b5061031061032d3660046122f8565b610a66565b34801561033e57600080fd5b5061035261034d36600461232d565b610ba7565b6040516102e7919061236a565b34801561036b57600080fd5b506102dd61037a36600461239d565b600c6020526000908152604090205481565b34801561039857600080fd5b506103106103a73660046123bf565b610c41565b3480156103b857600080fd5b506102dd6103c736600461232d565b610d9a565b3480156103d857600080fd5b506102dd6103e736600461239d565b6001600160a01b031660009081526007602052604090205490565b34801561040e57600080fd5b5061031061041d366004612474565b610dd4565b34801561042e57600080fd5b50610310610ed1565b6103106104453660046124cb565b610ee5565b34801561045657600080fd5b506102dd61046536600461239d565b600f6020526000908152604090205481565b34801561048357600080fd5b506102dd61049236600461232d565b60026020526000908152604090205481565b3480156104b057600080fd5b506103106104bf3660046124cb565b61113e565b3480156104d057600080fd5b506103106104df36600461255a565b61134b565b3480156104f057600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102e7565b34801561052257600080fd5b50600b546102dd565b34801561053757600080fd5b506102dd600a5481565b34801561054d57600080fd5b5061031061055c36600461239d565b61142c565b34801561056d57600080fd5b506102dd61057c36600461232d565b6114b1565b34801561058d57600080fd5b50476102dd565b3480156105a057600080fd5b506102dd6105af36600461239d565b6001600160a01b031660009081526005602052604090205490565b3480156105d657600080fd5b506102dd600b5481565b3480156105ec57600080fd5b506009546102dd565b34801561060157600080fd5b50600a546102dd565b34801561061657600080fd5b506102dd61062536600461239d565b60076020526000908152604090205481565b34801561064357600080fd5b506102dd6106523660046121cd565b6114d2565b34801561066357600080fd5b5061031061067236600461257c565b6114ff565b34801561068357600080fd5b506102dd61069236600461232d565b60046020526000908152604090205481565b3480156106b057600080fd5b506102dd600e5481565b3480156106c657600080fd5b506106ea6106d536600461239d565b60016020526000908152604090205460ff1681565b60405190151581526020016102e7565b34801561070657600080fd5b506102dd6107153660046121cd565b600860209081526000928352604080842090915290825290205481565b34801561073e57600080fd5b506102dd61074d3660046125e4565b611621565b610310610760366004612474565b611652565b34801561077157600080fd5b5061031061078036600461232d565b611783565b34801561079157600080fd5b506104fe6107a036600461232d565b6003602052600090815260409020546001600160a01b031681565b3480156107c757600080fd5b506102dd6107d636600461239d565b61193c565b3480156107e757600080fd5b506103106107f636600461239d565b6119c0565b34801561080757600080fd5b506103106108163660046124cb565b611a50565b3360009081526001602052604090205460ff168061084357506000546001600160a01b031633145b6108945760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e65720000000000000060448201526064015b60405180910390fd5b826108e15760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420726566657272616c20636f64650000000000000000000000604482015260640161088b565b6001600160a01b0382166109375760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726566657272656520616464726573730000000000000000604482015260640161088b565b6000838152600360205260409020546001600160a01b03161561099c5760405162461bcd60e51b815260206004820181905260248201527f526566657272616c20636f646520616c72656164792072656769737465726564604482015260640161088b565b6000838152600360205260409020546001600160a01b031680156109ed5760408051600080825260208083018085526001600160a01b0386168352600590915292902090516109eb9290612151565b505b506000838152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03969096169590951790945560098054600181019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01949094556004909352912055565b610a6e611c5b565b600a54600b5560005b600954811015610adf57600060098281548110610a9657610a9661260e565b60009182526020808320909101548252600381526040808320546001600160a01b031683526007825280832054600c909252909120555080610ad78161263a565b915050610a77565b5060005b8151811015610ba3576000828281518110610b0057610b0061260e565b6020026020010151905060005b600954811015610b8e57600060098281548110610b2c57610b2c61260e565b60009182526020808320909101548252600381526040808320546001600160a01b039081168085526008845282852091881680865291845282852054908552600d84528285209185529252909120555080610b868161263a565b915050610b0d565b50508080610b9b9061263a565b915050610ae3565b5050565b60066020526000908152604090208054610bc090612653565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec90612653565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b505050505081565b610c49611c5b565b815160005b81811015610d94576000848281518110610c6a57610c6a61260e565b6020026020010151905060005b84811015610d8a57600060098281548110610c9457610c9461260e565b906000526020600020015490506004600082815260200190815260200160002054421015610d81576000818152600360209081526040808320546001600160a01b0390811680855260088452828520918816855292529091205480610d3b5760405162461bcd60e51b815260206004820152601760248201527f4e6f206561726e696e677320746f207769746864726177000000000000000000604482015260640161088b565b8015610d7e57610d556001600160a01b0386168383611cb5565b6001600160a01b0380831660009081526008602090815260408083209389168352929052908120555b50505b50600101610c77565b5050600101610c4e565b50505050565b600060148210610dac57506019919050565b600f8210610dbc57506014919050565b60028210610dcc5750600f919050565b506000919050565b3360009081526001602052604090205460ff1680610dfc57506000546001600160a01b031633145b610e485760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b426004600083805190602001208152602001908152602001600020541115610ecc576001600160a01b038216610ec05760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b610ecc82846001611d35565b505050565b610ed9611c5b565b610ee36000611df5565b565b3360009081526001602052604090205460ff1680610f0d57506000546001600160a01b031633145b610f595760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b6001600160a01b03811615801590610f835750826001600160a01b0316816001600160a01b031614155b610fcf5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b4260046000878051906020012081526020019081526020016000205411156110fc576000805b6001600160a01b03831660009081526005602052604090205481101561107e57858051906020012060056000856001600160a01b03166001600160a01b0316815260200190815260200160002082815481106110535761105361260e565b90600052602060002001540361106c576001915061107e565b806110768161263a565b915050610ff5565b508015156000036110ea576001600160a01b03821660009081526005602090815260408083208851898401908120825460018101845592865284862090920191909155885190208352600690915290206110d887826126d3565b506110e582846000611d35565b6110f6565b6110f682846000611d35565b50611137565b600080546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015611135573d6000803e3d6000fd5b505b5050505050565b3360009081526001602052604090205460ff168061116657506000546001600160a01b031633145b6111b25760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b6001600160a01b038116158015906111dc5750826001600160a01b0316816001600160a01b031614155b6112285760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b426004600087805190602001208152602001908152602001600020541115611137576000805b6001600160a01b0383166000908152600560205260409020548110156112d357858051906020012060056000856001600160a01b03166001600160a01b0316815260200190815260200160002082815481106112ac576112ac61260e565b9060005260206000200154036112c157600191505b806112cb8161263a565b91505061124e565b5080151560000361133f576001600160a01b038216600090815260056020908152604080832088518984019081208254600181018455928652848620909201919091558851902083526006909152902061132d87826126d3565b5061133a82846001611d35565b611135565b61113582846001611d35565b3360009081526001602052604090205460ff168061137357506000546001600160a01b031633145b6113bf5760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b60008281526004602052604090205461141a5760405162461bcd60e51b815260206004820152601c60248201527f526566657272616c20636f646520646f6573206e6f7420657869737400000000604482015260640161088b565b60009182526004602052604090912055565b611434611c5b565b6001600160a01b03811661148a5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420636f6e74726f6c6c65722061646472657373000000000000604482015260640161088b565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b600981815481106114c157600080fd5b600091825260209091200154905081565b6001600160a01b038083166000908152600860209081526040808320938516835292905220545b92915050565b3360009081526001602052604090205460ff168061152757506000546001600160a01b031633145b6115735760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b4260046000838051906020012081526020019081526020016000205411156115fb576001600160a01b0383166115eb5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b6115f6838386611e52565b610d94565b610d946116106000546001600160a01b031690565b6001600160a01b0384169086611cb5565b6005602052816000526040600020818154811061163d57600080fd5b90600052602060002001600091509150505481565b3360009081526001602052604090205460ff168061167a57506000546001600160a01b031633145b6116c65760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b42600460008380519060200120815260200190815260200160002054111561174a576001600160a01b03821661173e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563656976657220616464726573730000000000000000604482015260640161088b565b610ecc82846000611d35565b600080546040516001600160a01b039091169185156108fc02918691818181858888f19350505050158015610d94573d6000803e3d6000fd5b61178b611c5b565b60005b818110156118ca576000600983815481106117ab576117ab61260e565b9060005260206000200154905060046000828152602001908152602001600020544210156118c1576000818152600360209081526040808320546001600160a01b031680845260079092529091205480156118be576000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461184d576040519150601f19603f3d011682016040523d82523d6000602084013e611852565b606091505b50509050806118a35760405162461bcd60e51b815260206004820152600e60248201527f5061796d656e74206661696c6564000000000000000000000000000000000000604482015260640161088b565b506001600160a01b0382166000908152600760205260408120555b50505b5060010161178e565b5047801561190d57600080546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561190b573d6000803e3d6000fd5b505b60405133907f8139efc425db5c04b6dd4e0df2e2ae5d44350cfb145cfbfc83bf39abbc2591ee90600090a25050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561199c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f99190612793565b6119c8611c5b565b6001600160a01b038116611a445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161088b565b611a4d81611df5565b50565b3360009081526001602052604090205460ff1680611a7857506000546001600160a01b031633145b611ac45760405162461bcd60e51b815260206004820152601960248201527f4e6f74206120636f6e74726f6c6c6572206f72206f776e657200000000000000604482015260640161088b565b426004600087805190602001208152602001908152602001600020541115611c355784516020808701919091206000908152600390915260409020546001600160a01b03168015801590611b2a5750836001600160a01b0316816001600160a01b031614155b156110f6576000805b6001600160a01b038316600090815260056020526040902054811015611bb857868051906020012060056000856001600160a01b03166001600160a01b031681526020019081526020016000208281548110611b9157611b9161260e565b906000526020600020015403611ba657600191505b80611bb08161263a565b915050611b33565b50801515600003611c23576001600160a01b038216600090815260056020908152604080832089518a840190812082546001810184559286528486209092019190915589519020835260069091529020611c1288826126d3565b50611c1e828486611e52565b611c2e565b611c2e828486611e52565b5050611137565b611137611c4a6000546001600160a01b031690565b6001600160a01b0383169084611cb5565b6000546001600160a01b03163314610ee35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ecc908490611ec2565b6001600160a01b038316600090815260056020526040902054606490611d5a90610d9a565b611d6490846127ac565b611d6e91906127c3565b6001600160a01b03841660009081526007602052604081208054909190611d969084906127e5565b90915550508015610ecc576001600160a01b038316600090815260056020526040902054606490611dc690610d9a565b611dd090846127ac565b611dda91906127c3565b600a6000828254611deb91906127e5565b9091555050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038316600090815260056020526040902054606490611e7790610d9a565b611e8190836127ac565b611e8b91906127c3565b6001600160a01b03808516600090815260086020908152604080832093871683529290529081208054909190611deb9084906127e5565b6000611f17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611faa9092919063ffffffff16565b9050805160001480611f38575080806020019051810190611f3891906127f8565b610ecc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161088b565b6060611fb98484600085611fc1565b949350505050565b6060824710156120395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161088b565b600080866001600160a01b03168587604051612055919061281a565b60006040518083038185875af1925050503d8060008114612092576040519150601f19603f3d011682016040523d82523d6000602084013e612097565b606091505b50915091506120a8878383876120b3565b979650505050505050565b6060831561212257825160000361211b576001600160a01b0385163b61211b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161088b565b5081611fb9565b611fb983838151156121375781518083602001fd5b8060405162461bcd60e51b815260040161088b919061236a565b82805482825590600052602060002090810192821561218c579160200282015b8281111561218c578251825591602001919060010190612171565b5061219892915061219c565b5090565b5b80821115612198576000815560010161219d565b80356001600160a01b03811681146121c857600080fd5b919050565b600080604083850312156121e057600080fd5b6121e9836121b1565b91506121f7602084016121b1565b90509250929050565b60008060006060848603121561221557600080fd5b83359250612225602085016121b1565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561227457612274612235565b604052919050565b600082601f83011261228d57600080fd5b8135602067ffffffffffffffff8211156122a9576122a9612235565b8160051b6122b882820161224b565b92835284810182019282810190878511156122d257600080fd5b83870192505b848310156120a8576122e9836121b1565b825291830191908301906122d8565b60006020828403121561230a57600080fd5b813567ffffffffffffffff81111561232157600080fd5b611fb98482850161227c565b60006020828403121561233f57600080fd5b5035919050565b60005b83811015612361578181015183820152602001612349565b50506000910152565b6020815260008251806020840152612389816040850160208701612346565b601f01601f19169190910160400192915050565b6000602082840312156123af57600080fd5b6123b8826121b1565b9392505050565b600080604083850312156123d257600080fd5b823567ffffffffffffffff8111156123e957600080fd5b6123f58582860161227c565b95602094909401359450505050565b600082601f83011261241557600080fd5b813567ffffffffffffffff81111561242f5761242f612235565b612442601f8201601f191660200161224b565b81815284602083860101111561245757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561248957600080fd5b83359250612499602085016121b1565b9150604084013567ffffffffffffffff8111156124b557600080fd5b6124c186828701612404565b9150509250925092565b600080600080600060a086880312156124e357600080fd5b853567ffffffffffffffff808211156124fb57600080fd5b61250789838a01612404565b9650602088013591508082111561251d57600080fd5b5061252a88828901612404565b945050612539604087016121b1565b92506060860135915061254e608087016121b1565b90509295509295909350565b6000806040838503121561256d57600080fd5b50508035926020909101359150565b6000806000806080858703121561259257600080fd5b843593506125a2602086016121b1565b92506125b0604086016121b1565b9150606085013567ffffffffffffffff8111156125cc57600080fd5b6125d887828801612404565b91505092959194509250565b600080604083850312156125f757600080fd5b612600836121b1565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161264c5761264c612624565b5060010190565b600181811c9082168061266757607f821691505b60208210810361268757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ecc57600081815260208120601f850160051c810160208610156126b45750805b601f850160051c820191505b81811015611135578281556001016126c0565b815167ffffffffffffffff8111156126ed576126ed612235565b612701816126fb8454612653565b8461268d565b602080601f831160018114612736576000841561271e5750858301515b600019600386901b1c1916600185901b178555611135565b600085815260208120601f198616915b8281101561276557888601518255948401946001909101908401612746565b50858210156127835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156127a557600080fd5b5051919050565b80820281158282048414176114f9576114f9612624565b6000826127e057634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156114f9576114f9612624565b60006020828403121561280a57600080fd5b815180151581146123b857600080fd5b6000825161282c818460208701612346565b919091019291505056fea2646970667358221220e0260e6672ad54e64c987650e35190fedfa0396dbbe0cfaedca8dfb14abbdd6064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setReferree(bytes32,address,uint256)": {
        "notice": "Only your controller or admin should be able to call this!"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7168,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7172,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "commitments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 7176,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "referrees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 7180,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "expirydates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 7185,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "referrals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 7189,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "referredBy",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 7193,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "nativeEarnings",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7199,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "tokenEarnings",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7202,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "referralCodes",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 7204,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "untrackedEarnings",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7206,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "snapshotUntrackedEarnings",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7210,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "snapshotNativeEarnings",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7216,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "snapshotTokenEarnings",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7218,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "trackedNativeEarnings",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 7222,
        "contract": "contracts/ethregistrar/ReferralController.sol:ReferralController",
        "label": "trackedTokenEarnings",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}